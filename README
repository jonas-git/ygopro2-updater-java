ygopro2-updater-java

This program's purpose is downloading and maintaining the most up-to-date YGOPro II game data from
various online GitHub repositories. Its configurability allows for much versatility, such that one
can easily use it to download data of different kinds from GitHub repositories by simply manipulating
the underlying configuration file.


Compiling:
  - The IntelliJ IDEA is recommended for this process
  - The following libraries are needed at compile time and expected to be in the "lib" folder:
      * Google Gson 2.8.2: gson-2.8.2.jar

Terminology and syntax:
  - "api" stands for the official GitHub API (api.github.com).
  - "raw" stands for the server that delivers raw GitHub repository content (raw.githubusercontent.com).
  - Variables are either prefixed with a colon (':') (in URLs) or surrounded with triangle brackets ('<>').
  - URL paths are sorrounded with braces ('{}') for the "api" and with brackets ('[]') for "raw".

HTTP headers required (*) (or recommended) for some requests (which are specified in the parantheses):
   (  api  ) "Accept: application/vnd.github.v3+json"
 * (api/raw) "Authorization: Token <token>"

Initial download (when no log file exists yet):
  - get the tree of the master branch with {/repos/:owner/:repo/git/trees/master?recursive=1}
  - visit step A
  - create the file updatelog.json and add the sha and all file paths

Update of previous downloads (when there is a log file):
  - get the tree with the updated files by comparing the sha of the lastly downloaded branch
      to the most recent one (master): {/repos/:owner/:repo/compare/:sha...master}
  - remove deleted files from the local file system and the list in updatelog.json
  - redownload files from the list that are missing locally [/:owner/:repo/:sha/:path]
  - download the rest of the files that were added or modified (with step A)
  - set the sha in updatelog.json to the sha of the last commit listed in the api response
  - add the files that were newly added to the repository to the list in updatelog.json

step A - download:
- download all matching files in the tree into their corresponding folders from [/:owner/:repo/:sha/:path]
  -> matching files are files that match the pattern in updateconfig.json (field 'source')
  -> corresponding folders are the target download folders named in updateconfig.json (field 'destination')


updateconfig.json: {
    // the encrypted GitHub API token:
    "encrypted_token": "<token>",
	"repositories:" [
		{
			"owner": "<owner>",
			"name": "<repo>",
			"files": {
				// source: a file path with zero or more wildcards
				// destination: the folder in which a matched file should be put into
				"<source>": "<destination>",
				// ...
			}
		},
		// ...
	]
}

updatelog.json: {
	"repositories": [
		{
			"owner": "<owner>",
			"name": "<name>",
			"commit": "<sha>", // sha of the branch that was updated the last time:
			"files": [ /* list of all file names that were downloaded */ ]
		},
		// ...
	]
}


Considerable options:
  - let the program download the newest release of itself
  - keep and ignore locally modified files
